4/  create or replace function FN_VERIF (user_name varchar, password varchar, old_password varchar) return boolean
is 
x number ; 
begin
for j in 1..length(password) loop
if substr(password,j,1) not between '0'and '9'
then x:=x+1;
end if;
end loop;

if x=0 then raise_application_error(-20001,'Le mot de passe doit contenir au moins un chiffre ');
end if;

if Ascii(substr(password,length(password),1)) not between AScii('A') and Ascii('Z') then
raise_application_error(-20001,'Le mot de passe doit se te
terminer par une lettre alphabetique');
end if ; 
return true ; 
end ; 
/


5 /alter profile profil_exam limit
password_verify_function FN_VERIF  ;

6/CREATE USER USER_CTL
  IDENTIFIED BY password
  DEFAULT TABLESPACE USERS
  QUOTA 10M ON USERS
  TEMPORARY TABLESPACE TB_CTL
  PROFILE Profil_CTL
  ACCOUNT LOCK;

7/create or replace function FN_NB_USERS return number 
is 
nb number ; 
begin
select count(*) into nb 
from dba_users 
where account_status='EXPIRED & LOCKED'; 
return nb ;
end ; 
/


8/CREATE ROLE ROLE_CTL;

GRANT CONNECT, CREATE PROCEDURE, CREATE FUNCTION, SELECT ON HR.JOB_HISTORY TO ROLE_CTL;

GRANT ROLE_CTL TO USER_CTL WITH ADMIN OPTION;

9/GRANT ROLE_CTL TO USER_CTL;

10/CREATE OR REPLACE PROCEDURE Liste_PRIVS(p_role VARCHAR2) AS
  v_granted_role VARCHAR2(100);
BEGIN
  FOR rec IN (SELECT granted_role FROM dba_role_privs WHERE grantee = p_role) LOOP
    v_granted_role := rec.granted_role;
    DBMS_OUTPUT.PUT_LINE(v_granted_role);
  END LOOP;
END;

11/AUDIT ALL BY DEFAULT;

12/AUDIT CREATE TRIGGER BY USER_CTL;
AUDIT INSERT ON HR.REGIONS BY SESSION;
AUDIT LOGON;

13/


